# -*- coding: utf-8 -*-
"""visualdataanalysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OExCN-7m67OTDSSdso2B0rEiF4Iujxa9
"""
import streamlit as st

from PIL import Image

import sys
print(sys.version)



import pandas as pd

def load_and_preprocess(file_path):
    df = pd.read_csv(file_path)
    df.fillna(0, inplace=True)
    numeric_cols = df.select_dtypes(include='number').columns.tolist()
    categorical_cols = df.select_dtypes(exclude='number').columns.tolist()
    return df, numeric_cols, categorical_cols

import openai

openai.api_key = st.secrets["OPENAI_API_KEY"]


def suggest_plots(df, numeric_cols, categorical_cols):
    prompt = f"""
You are a data analyst. Suggest 3-5 visualizations (type and columns) to best highlight
patterns, correlations, or anomalies in the following dataset:
Columns: {df.columns.tolist()}
Numeric columns: {numeric_cols}
Categorical columns: {categorical_cols}
Respond as a Python list of dicts: [{"type": "scatter", "x": "...", "y": "..."}, ...]
"""
    response = openai.ChatCompletion.create(
    model="gpt-4o-mini",
    messages=[{"role": "user", "content": "Hello"}]
)
    port ast
    suggested_plots = ast.literal_eval(response.choices[0].message.content)
    return suggested_plots

import matplotlib.pyplot as plt
import seaborn as sns

def generate_plots(df, suggested_plots):
    plot_files = []
    for i, plot in enumerate(suggested_plots):
        plt.figure(figsize=(6,4))
        if plot["type"] == "scatter":
            sns.scatterplot(data=df, x=plot["x"], y=plot["y"])
        elif plot["type"] == "bar":
            sns.barplot(data=df, x=plot["x"], y=plot["y"])
        elif plot["type"] == "hist":
            sns.histplot(df[plot["x"]], kde=True)
        plt.title(f"{plot['type'].capitalize()} of {plot.get('x','')} vs {plot.get('y','')}")
        filename = f"plot_{i}.png"
        plt.savefig(filename)
        plt.close()
        plot_files.append(filename)
    return plot_files

def generate_insights_and_recommendations(df):
    description = f"Dataset has {df.shape[0]} rows and {df.shape[1]} columns. Here are first few rows:\n{df.head().to_string()}"
    prompt = f"""
Analyze the following dataset and provide:
1. A concise summary highlighting trends, anomalies, and correlations.
2. Actionable recommendations based on the patterns you detect.
Dataset: {description}
"""
    response = client.chat.completions.create(
        model="gpt-4.1-mini",
        messages=[{"role": "user", "content": prompt}]
    )
    return response.choices[0].message.content

#pip install pandas matplotlib seaborn plotly streamlit openai fpdf



st.title("Generative AI for Visual Data Analysis")

uploaded_file = st.file_uploader("Upload an Image", type=["png", "jpg", "jpeg"])

if uploaded_file is not None:
    image = Image.open(uploaded_file)
    st.image(image, caption="Uploaded Image", use_column_width=True)
    
    # Extract text using OCR
    with st.spinner("Extracting text..."):
        extracted_text = pytesseract.image_to_string(image)

    st.subheader("Extracted Text")
    st.write(extracted_text if extracted_text.strip() else "No readable text found.")

    if st.button("Analyze with GPT"):
        prompt = (
            "Analyze the following extracted text from an image and provide insights:\n\n"
            f"{extracted_text}\n\n"
            "Give a short summary, category of the image content, and possible use cases."
        )

        with st.spinner("Analyzing..."):
            response = openai.ChatCompletion.create(
                model="gpt-4o-mini",
                messages=[{"role": "user", "content": prompt}],
            )

        st.subheader("AI Analysis")
        st.write(response.choices[0].message["content"])
