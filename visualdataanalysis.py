# -*- coding: utf-8 -*-
"""visualdataanalysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OExCN-7m67OTDSSdso2B0rEiF4Iujxa9
"""

import pandas as pd

def load_and_preprocess(file_path):
    df = pd.read_csv(file_path)
    df.fillna(0, inplace=True)
    numeric_cols = df.select_dtypes(include='number').columns.tolist()
    categorical_cols = df.select_dtypes(exclude='number').columns.tolist()
    return df, numeric_cols, categorical_cols



def suggest_plots(df, numeric_cols, categorical_cols):
    prompt = f"""
You are a data analyst. Suggest 3-5 visualizations (type and columns) to best highlight
patterns, correlations, or anomalies in the following dataset:
Columns: {df.columns.tolist()}
Numeric columns: {numeric_cols}
Categorical columns: {categorical_cols}
Respond as a Python list of dicts: [{"type": "scatter", "x": "...", "y": "..."}, ...]
"""
    response = client.chat.completions.create(
        model="gpt-4.1-mini",
        messages=[{"role": "user", "content": prompt}]
    )
    import ast
    suggested_plots = ast.literal_eval(response.choices[0].message.content)
    return suggested_plots

import matplotlib.pyplot as plt
import seaborn as sns

def generate_plots(df, suggested_plots):
    plot_files = []
    for i, plot in enumerate(suggested_plots):
        plt.figure(figsize=(6,4))
        if plot["type"] == "scatter":
            sns.scatterplot(data=df, x=plot["x"], y=plot["y"])
        elif plot["type"] == "bar":
            sns.barplot(data=df, x=plot["x"], y=plot["y"])
        elif plot["type"] == "hist":
            sns.histplot(df[plot["x"]], kde=True)
        plt.title(f"{plot['type'].capitalize()} of {plot.get('x','')} vs {plot.get('y','')}")
        filename = f"plot_{i}.png"
        plt.savefig(filename)
        plt.close()
        plot_files.append(filename)
    return plot_files

def generate_insights_and_recommendations(df):
    description = f"Dataset has {df.shape[0]} rows and {df.shape[1]} columns. Here are first few rows:\n{df.head().to_string()}"
    prompt = f"""
Analyze the following dataset and provide:
1. A concise summary highlighting trends, anomalies, and correlations.
2. Actionable recommendations based on the patterns you detect.
Dataset: {description}
"""
    response = client.chat.completions.create(
        model="gpt-4.1-mini",
        messages=[{"role": "user", "content": prompt}]
    )
    return response.choices[0].message.content

#pip install pandas matplotlib seaborn plotly streamlit openai fpdf

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import openai

# Set your API key in Streamlit secrets
openai.api_key = st.secrets["OPENAI_API_KEY"]

st.title("Generative AI for Visual Data Analysis")

# ------------------ File Upload ------------------
uploaded_file = st.file_uploader(
    "Upload CSV or Excel file", type=["csv", "xlsx"]
)

if uploaded_file:
    if uploaded_file.name.endswith(".csv"):
        df = pd.read_csv(uploaded_file)
    else:
        df = pd.read_excel(uploaded_file)

    st.subheader("Data Preview")
    st.dataframe(df.head())

    numeric_cols = df.select_dtypes(include="number").columns.tolist()
    st.subheader("Numeric Columns Detected")
    st.write(numeric_cols)

    # ------------------ Basic Plots ------------------
    st.subheader("Sample Plots")
    if numeric_cols:
        col1, col2 = st.columns(2)
        with col1:
            fig, ax = plt.subplots()
            sns.histplot(df[numeric_cols[0]], kde=True, ax=ax)
            ax.set_title(f"Histogram of {numeric_cols[0]}")
            st.pyplot(fig)

        with col2:
            fig2 = px.box(df, y=numeric_cols[0], title=f"Boxplot of {numeric_cols[0]}")
            st.plotly_chart(fig2)

    # ------------------ AI Analysis ------------------
    st.subheader("AI-Generated Insights")

# Use a preview of the dataset to reduce token usage
dataset_preview = df.head().to_string()

prompt = f"""
You are a data analyst. Analyze this dataset preview (first 5 rows) and provide:

1. A short summary of the dataset
2. Key patterns, correlations, or anomalies
3. Suggestions for further analysis

Dataset Preview:
{dataset_preview}
"""

if st.button("Generate Insights"):
    with st.spinner("Generating AI insights..."):
        try:
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}],
            )
            st.write(response.choices[0].message["content"])

        except openai.error.RateLimitError:
            st.warning(
                "Rate limit exceeded. Showing sample insights instead."
            )
            # Fallback sample insights
            st.write(
                """
**Sample AI Insights:**  

- The dataset shows no numeric columns.  
- No obvious patterns or correlations detected.  
- Consider adding numeric data for better analysis.  
- For text data, you could perform NLP summarization or keyword extraction.
"""
            )
        except openai.error.AuthenticationError:
            st.error("Invalid API key. Please check your OpenAI key in Streamlit secrets.")
        except openai.error.OpenAIError as e:
            st.error(f"OpenAI API error: {e}")
